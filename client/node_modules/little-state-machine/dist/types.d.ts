export declare type Store = Record<string, any>;
export declare type StoreUpdateFunction = (store: any, payload: any) => Store;
export declare type UpdateStore = StoreUpdateFunction | {
    [key: string]: StoreUpdateFunction;
};
export declare type UpdateStoreFunction = <T>(payload: T) => T;
export declare type ActionName = {
    debugName: string;
};
export declare type SetStore = <T>(value: T) => void;
export declare type GetStore = () => Store;
export declare type GetStoreName = () => string;
export declare type Options = {
    shouldReRenderApp?: boolean;
};
export declare type Action = (store: any, payload: any) => any;
export declare type Actions = {
    [key: string]: Action;
};
export declare type TransformFunc = ({ externalStoreData, currentStoreData, }: {
    externalStoreData: any;
    currentStoreData: any;
}) => any;
declare type TransformOptions = {
    externalStoreName: string;
    transform: TransformFunc;
};
export declare type StateMachineOptions = {
    name: string;
    middleWares?: Function[];
    syncStores?: Record<string, string[]> | TransformOptions | TransformOptions[];
};
export {};
